#blank-panel {
  margin: 0 0 0 -20px;
  background-color: white;
  height: 100%; }
  #blank-panel > header {
    padding: 16px 32px; }
    #blank-panel > header h1 {
      padding: 0;
      font-weight: 600;
      line-height: 2em; }
  #blank-panel > nav {
    padding: 0 32px;
    margin: 0;
    border-bottom: 1px solid #e2e4e7; }
    #blank-panel > nav ul {
      margin: 0 0 -1px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex; }
      #blank-panel > nav ul li {
        display: -webkit-inline-box;
        display: -ms-inline-flexbox;
        display: inline-flex;
        margin: 0;
        border-color: #e2e4e7;
        border-style: solid;
        border-width: 1px 0 0 1px; }
        #blank-panel > nav ul li:last-child {
          border-right-width: 1px; }
        #blank-panel > nav ul li.active {
          background-color: #f1f1f1;
          border-bottom-width: 0; }
      #blank-panel > nav ul a {
        text-decoration: none;
        display: block;
        padding: 10px 22px;
        color: #555;
        font-weight: bold; }
        #blank-panel > nav ul a:focus, #blank-panel > nav ul a:active {
          -webkit-box-shadow: none;
                  box-shadow: none; }
  #blank-panel > form {
    background-color: #f1f1f1;
    padding: 0 32px; }
    #blank-panel > form::after {
      clear: both;
      content: " ";
      display: table; }
  #blank-panel #panel-sections {
    padding: 16px 0;
    border-bottom: 1px solid #dbdbdb; }
    #blank-panel #panel-sections > section {
      display: none; }
      #blank-panel #panel-sections > section.active {
        display: block; }
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkbWluLnNjc3MiLCJfdmFyaWFibGVzLnNjc3MiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYnVsbWEvc2Fzcy91dGlsaXRpZXMvaW5pdGlhbC12YXJpYWJsZXMuc2FzcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9idWxtYS9zYXNzL3V0aWxpdGllcy9taXhpbnMuc2FzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQTtFQUNFLG1CQUFtQjtFQUNuQix1QkNLc0I7RURKdEIsWUFBWSxFQUFBO0VBSGQ7SUFNSSxrQkN3Q00sRUFBQTtJRDlDVjtNQVNNLFVBQVU7TUFDVixnQkUwQmU7TUZ6QmYsZ0JBQWdCLEVBQUE7RUFYdEI7SUFnQkksZUM4Qk07SUQ3Qk4sU0FBUztJQUNULGdDQXJCNEIsRUFBQTtJQUdoQztNQXFCTSxnQkFBZ0I7TUFDaEIsb0JBQWE7TUFBYixvQkFBYTtNQUFiLGFBQWEsRUFBQTtNQXRCbkI7UUF5QlEsMkJBQW9CO1FBQXBCLDJCQUFvQjtRQUFwQixvQkFBb0I7UUFDcEIsU0FBUztRQUNULHFCQTlCd0I7UUErQnhCLG1CQUFtQjtRQUNuQix5QkFBeUIsRUFBQTtRQTdCakM7VUFnQ1UsdUJBQXVCLEVBQUE7UUFoQ2pDO1VBb0NVLHlCQXpDZ0I7VUEwQ2hCLHNCQUFzQixFQUFBO01BckNoQztRQTBDUSxxQkFBcUI7UUFDckIsY0FBYztRQUNkLGtCQUFrQjtRQUNsQixXQUFXO1FBQ1gsaUJBQWlCLEVBQUE7UUE5Q3pCO1VBa0RVLHdCQUFnQjtrQkFBaEIsZ0JBQWdCLEVBQUE7RUFsRDFCO0lBMkRJLHlCQWhFc0I7SUFpRXRCLGVDZE0sRUFBQTtJRDlDVjtNR0hJLFdBQVc7TUFDWCxZQUFZO01BQ1osY0FBYyxFQUFBO0VIQ2xCO0lBZ0VJLGVBQXFCO0lBQ3JCLGdDQzlEMEIsRUFBQTtJREg5QjtNQW9FTSxhQUFhLEVBQUE7TUFwRW5CO1FBdUVRLGNBQWMsRUFBQSIsImZpbGUiOiJhZG1pbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0ICcuL3ZhcmlhYmxlcyc7XG5cbiRwYW5lbC1iYWNrZ3JvdW5kOiAjZjFmMWYxO1xuJHBhbmVsLWJvcmRlci1jb2xvcjogJGdyZXktbGlnaHRlcjtcbiRwYW5lbC1uYXYtYm9yZGVyLWNvbG9yOiAjZTJlNGU3O1xuJHBhbmVsLXBhZGRpbmc6ICgkZ2FwIC8gMikgJGdhcDtcblxuI2JsYW5rLXBhbmVsIHtcbiAgbWFyZ2luOiAwIDAgMCAtMjBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHdoaXRlO1xuICBoZWlnaHQ6IDEwMCU7XG5cbiAgPiBoZWFkZXIge1xuICAgIHBhZGRpbmc6ICRwYW5lbC1wYWRkaW5nO1xuXG4gICAgaDEge1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGZvbnQtd2VpZ2h0OiAkd2VpZ2h0LXNlbWlib2xkO1xuICAgICAgbGluZS1oZWlnaHQ6IDJlbTtcbiAgICB9XG4gIH1cblxuICA+IG5hdiB7XG4gICAgcGFkZGluZzogMCAkZ2FwO1xuICAgIG1hcmdpbjogMDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHBhbmVsLW5hdi1ib3JkZXItY29sb3I7XG5cbiAgICB1bCB7XG4gICAgICBtYXJnaW46IDAgMCAtMXB4O1xuICAgICAgZGlzcGxheTogZmxleDtcblxuICAgICAgbGkge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBib3JkZXItY29sb3I6ICRwYW5lbC1uYXYtYm9yZGVyLWNvbG9yO1xuICAgICAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICAgICAgICBib3JkZXItd2lkdGg6IDFweCAwIDAgMXB4O1xuXG4gICAgICAgICY6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAxcHg7XG4gICAgICAgIH1cblxuICAgICAgICAmLmFjdGl2ZSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHBhbmVsLWJhY2tncm91bmQ7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcGFkZGluZzogMTBweCAyMnB4O1xuICAgICAgICBjb2xvcjogIzU1NTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbiAgICAgICAgJjpmb2N1cyxcbiAgICAgICAgJjphY3RpdmUge1xuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICA+IGZvcm0ge1xuICAgIEBpbmNsdWRlIGNsZWFyZml4KCk7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcGFuZWwtYmFja2dyb3VuZDtcbiAgICBwYWRkaW5nOiAwICRnYXA7XG4gIH1cblxuICAjcGFuZWwtc2VjdGlvbnMge1xuICAgIHBhZGRpbmc6ICgkZ2FwIC8gMikgMDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHBhbmVsLWJvcmRlci1jb2xvcjtcblxuICAgID4gc2VjdGlvbiB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuXG4gICAgICAmLmFjdGl2ZSB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gQ29sb3JzXG5cbiRibGFjazogaHNsKDAsIDAlLCA0JSk7XG4kYmxhY2stYmlzOiBoc2woMCwgMCUsIDclKTtcbiRibGFjay10ZXI6IGhzbCgwLCAwJSwgMTQlKTtcblxuJGdyZXktZGFya2VyOiBoc2woMCwgMCUsIDIxJSk7XG4kZ3JleS1kYXJrOiBoc2woMCwgMCUsIDI5JSk7XG4kZ3JleTogaHNsKDAsIDAlLCA0OCUpO1xuJGdyZXktbGlnaHQ6IGhzbCgwLCAwJSwgNzElKTtcbiRncmV5LWxpZ2h0ZXI6IGhzbCgwLCAwJSwgODYlKTtcblxuJHdoaXRlLXRlcjogaHNsKDAsIDAlLCA5NiUpO1xuJHdoaXRlLWJpczogaHNsKDAsIDAlLCA5OCUpO1xuJHdoaXRlOiBoc2woMCwgMCUsIDEwMCUpO1xuXG4kb3JhbmdlOiBoc2woMTQsIDEwMCUsIDUzJSk7XG4keWVsbG93OiBoc2woNDgsIDEwMCUsIDY3JSk7XG4kZ3JlZW46IGhzbCgxNDEsIDcxJSwgNDglKTtcbiR0dXJxdW9pc2U6IGhzbCgxNzEsIDEwMCUsIDQxJSk7XG4kY3lhbjogaHNsKDIwNCwgODYlLCA1MyUpO1xuJGJsdWU6IGhzbCgyMTcsIDcxJSwgNTMlKTtcbiRwdXJwbGU6IGhzbCgyNzEsIDEwMCUsIDcxJSk7XG4kcmVkOiBoc2woMzQ4LCAxMDAlLCA2MSUpO1xuXG4vLyBUeXBvZ3JhcGh5XG5cbiRmYW1pbHktc2Fucy1zZXJpZjogQmxpbmtNYWNTeXN0ZW1Gb250LCAtYXBwbGUtc3lzdGVtLCAnU2Vnb2UgVUknLCAnUm9ib3RvJywgJ094eWdlbicsICdVYnVudHUnLCAnQ2FudGFyZWxsJywgJ0ZpcmEgU2FucycsICdEcm9pZCBTYW5zJywgJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWY7XG4vLyAkZmFtaWx5LXNlcmlmOiBCbGlua01hY1N5c3RlbUZvbnQsIC1hcHBsZS1zeXN0ZW0sICdTZWdvZSBVSScsICdSb2JvdG8nLCAnT3h5Z2VuJywgJ1VidW50dScsICdDYW50YXJlbGwnLCAnRmlyYSBTYW5zJywgJ0Ryb2lkIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2VyaWY7XG4kZmFtaWx5LW1vbm9zcGFjZTogbW9ub3NwYWNlO1xuLy8gJHJlbmRlci1tb2RlOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XG5cbi8vICRzaXplLTE6IDNyZW07XG4vLyAkc2l6ZS0yOiAyLjVyZW07XG4vLyAkc2l6ZS0zOiAycmVtO1xuLy8gJHNpemUtNDogMS41cmVtO1xuLy8gJHNpemUtNTogMS4yNXJlbTtcbi8vICRzaXplLTY6IDFyZW07XG4vLyAkc2l6ZS03OiAwLjc1cmVtO1xuXG4vLyAkd2VpZ2h0LWxpZ2h0OiAzMDA7XG4vLyAkd2VpZ2h0LW5vcm1hbDogNDAwO1xuLy8gJHdlaWdodC1tZWRpdW06IDUwMDtcbi8vICR3ZWlnaHQtc2VtaWJvbGQ6IDYwMDtcbi8vICR3ZWlnaHQtYm9sZDogNzAwO1xuXG4vLyBTcGFjaW5nXG5cbi8vICRibG9jay1zcGFjaW5nOiAxLjVyZW07XG5cbi8vIFJlc3BvbnNpdmVuZXNzXG5cbi8vIFRoZSBjb250YWluZXIgaG9yaXpvbnRhbCBnYXAsIHdoaWNoIGFjdHMgYXMgdGhlIG9mZnNldCBmb3IgYnJlYWtwb2ludHNcbiRnYXA6IDMycHg7XG4kY29sdW1uLWdhcDogMC43NXJlbTtcbi8vIDk2MCwgMTE1MiwgYW5kIDEzNDQgaGF2ZSBiZWVuIGNob3NlbiBiZWNhdXNlIHRoZXkgYXJlIGRpdmlzaWJsZSBieSBib3RoIDEyIGFuZCAxNlxuLy8gJHRhYmxldDogNzY5cHg7XG4vLyA5NjBweCBjb250YWluZXIgKyA0cmVtXG4vLyAkZGVza3RvcDogOTYwcHggKyAoMiAqICRnYXApO1xuLy8gMTE1MnB4IGNvbnRhaW5lciArIDRyZW1cbi8vICR3aWRlc2NyZWVuOiAxMTUycHggKyAoMiAqICRnYXApO1xuLy8gJHdpZGVzY3JlZW4tZW5hYmxlZDogdHJ1ZTtcbi8vIDEzNDRweCBjb250YWluZXIgKyA0cmVtXG4vLyAkZnVsbGhkOiAxMzQ0cHggKyAoMiAqICRnYXApO1xuLy8gJGZ1bGxoZC1lbmFibGVkOiB0cnVlO1xuXG4vLyBNaXNjZWxsYW5lb3VzXG5cbi8vICRlYXNpbmc6IGVhc2Utb3V0O1xuLy8gJHJhZGl1cy1zbWFsbDogMnB4O1xuLy8gJHJhZGl1czogNHB4O1xuLy8gJHJhZGl1cy1sYXJnZTogNnB4O1xuLy8gJHJhZGl1cy1yb3VuZGVkOiAyOTA0ODZweDtcbi8vICRzcGVlZDogODZtcztcblxuLy8gRmxhZ3NcblxuLy8gJHZhcmlhYmxlLWNvbHVtbnM6IHRydWU7XG5cbi8vICRwcmltYXJ5OiAkdHVycXVvaXNlO1xuXG4vLyAkaW5mbzogJGN5YW47XG4vLyAkc3VjY2VzczogJGdyZWVuO1xuLy8gJHdhcm5pbmc6ICR5ZWxsb3c7XG4vLyAkZGFuZ2VyOiAkcmVkO1xuXG4vLyAkbGlnaHQ6ICR3aGl0ZS10ZXI7XG4vLyAkZGFyazogJGdyZXktZGFya2VyO1xuXG4vLyBJbnZlcnQgY29sb3JzXG5cbi8vICRvcmFuZ2UtaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJG9yYW5nZSk7XG4vLyAkeWVsbG93LWludmVydDogZmluZENvbG9ySW52ZXJ0KCR5ZWxsb3cpO1xuLy8gJGdyZWVuLWludmVydDogZmluZENvbG9ySW52ZXJ0KCRncmVlbik7XG4vLyAkdHVycXVvaXNlLWludmVydDogZmluZENvbG9ySW52ZXJ0KCR0dXJxdW9pc2UpO1xuLy8gJGN5YW4taW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJGN5YW4pO1xuLy8gJGJsdWUtaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJGJsdWUpO1xuLy8gJHB1cnBsZS1pbnZlcnQ6IGZpbmRDb2xvckludmVydCgkcHVycGxlKTtcbi8vICRyZWQtaW52ZXJ0OiBmaW5kQ29sb3JJbnZlcnQoJHJlZCk7XG5cbi8vICRwcmltYXJ5LWludmVydDogJHR1cnF1b2lzZS1pbnZlcnQ7XG4vLyAkaW5mby1pbnZlcnQ6ICRjeWFuLWludmVydDtcbi8vICRzdWNjZXNzLWludmVydDogJGdyZWVuLWludmVydDtcbi8vICR3YXJuaW5nLWludmVydDogJHllbGxvdy1pbnZlcnQ7XG4vLyAkZGFuZ2VyLWludmVydDogJHJlZC1pbnZlcnQ7XG4vLyAkbGlnaHQtaW52ZXJ0OiAkZGFyaztcbi8vICRkYXJrLWludmVydDogJGxpZ2h0O1xuXG4vLyBHZW5lcmFsIGNvbG9yc1xuXG4vLyAkYmFja2dyb3VuZDogJHdoaXRlLXRlcjtcblxuLy8gJGJvcmRlcjogJGdyZXktbGlnaHRlcjtcbi8vICRib3JkZXItaG92ZXI6ICRncmV5LWxpZ2h0O1xuXG4vLyBUZXh0IGNvbG9yc1xuXG4vLyAkdGV4dDogJGdyZXktZGFyaztcbi8vICR0ZXh0LWludmVydDogZmluZENvbG9ySW52ZXJ0KCR0ZXh0KTtcbi8vICR0ZXh0LWxpZ2h0OiAkZ3JleTtcbi8vICR0ZXh0LXN0cm9uZzogJGdyZXktZGFya2VyO1xuXG4vLyBDb2RlIGNvbG9yc1xuXG4vLyAkY29kZTogJHJlZDtcbi8vICRjb2RlLWJhY2tncm91bmQ6ICRiYWNrZ3JvdW5kO1xuXG4vLyAkcHJlOiAkdGV4dDtcbi8vICRwcmUtYmFja2dyb3VuZDogJGJhY2tncm91bmQ7XG5cbi8vIExpbmsgY29sb3JzXG5cbi8vICRsaW5rOiAkYmx1ZTtcbi8vICRsaW5rLWludmVydDogJGJsdWUtaW52ZXJ0O1xuLy8gJGxpbmstdmlzaXRlZDogJHB1cnBsZTtcblxuLy8gJGxpbmstaG92ZXI6ICRncmV5LWRhcmtlcjtcbi8vICRsaW5rLWhvdmVyLWJvcmRlcjogJGdyZXktbGlnaHQ7XG5cbi8vICRsaW5rLWZvY3VzOiAkZ3JleS1kYXJrZXI7XG4vLyAkbGluay1mb2N1cy1ib3JkZXI6ICRibHVlO1xuXG4vLyAkbGluay1hY3RpdmU6ICRncmV5LWRhcmtlcjtcbi8vICRsaW5rLWFjdGl2ZS1ib3JkZXI6ICRncmV5LWRhcms7XG5cbi8vIFR5cG9ncmFwaHlcblxuJGZhbWlseS1wcmltYXJ5OiB2YXIoLS10eXBvZ3JhcGh5X2Jhc2VfZm9udF9mYW1pbHkpO1xuJGZhbWlseS1zZWNvbmRhcnk6IHZhcigtLXR5cG9ncmFwaHlfYmFzZV9mb250X2ZhbWlseSk7XG4kZmFtaWx5LWNvZGU6IHZhcigtLXR5cG9ncmFwaHlfcHJlX2ZvbnRfZmFtaWx5KTtcblxuJGJvZHktYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XG5cbi8vICRzaXplLXNtYWxsOiAkc2l6ZS03O1xuLy8gJHNpemUtbm9ybWFsOiAkc2l6ZS02O1xuLy8gJHNpemUtbWVkaXVtOiAkc2l6ZS01O1xuLy8gJHNpemUtbGFyZ2U6ICRzaXplLTQ7XG5cbi8vIExpc3RzIGFuZCBtYXBzXG4vLyAkY3VzdG9tLWNvbG9yczogbnVsbDtcbi8vICRjdXN0b20tc2hhZGVzOiBudWxsO1xuXG4vLyAkY29sb3JzOiBtZXJnZUNvbG9yTWFwcygoJ3doaXRlJzogKCR3aGl0ZSwgJGJsYWNrKSwgJ2JsYWNrJzogKCRibGFjaywgJHdoaXRlKSwgJ2xpZ2h0JzogKCRsaWdodCwgJGxpZ2h0LWludmVydCksICdkYXJrJzogKCRkYXJrLCAkZGFyay1pbnZlcnQpLCAncHJpbWFyeSc6ICgkcHJpbWFyeSwgJHByaW1hcnktaW52ZXJ0KSwgJ2xpbmsnOiAoJGxpbmssICRsaW5rLWludmVydCksICdpbmZvJzogKCRpbmZvLCAkaW5mby1pbnZlcnQpLCAnc3VjY2Vzcyc6ICgkc3VjY2VzcywgJHN1Y2Nlc3MtaW52ZXJ0KSwgJ3dhcm5pbmcnOiAoJHdhcm5pbmcsICR3YXJuaW5nLWludmVydCksICdkYW5nZXInOiAoJGRhbmdlciwgJGRhbmdlci1pbnZlcnQpKSwgJGN1c3RvbS1jb2xvcnMpO1xuLy8gJHNoYWRlczogbWVyZ2VDb2xvck1hcHMoKCdibGFjay1iaXMnOiAkYmxhY2stYmlzLCAnYmxhY2stdGVyJzogJGJsYWNrLXRlciwgJ2dyZXktZGFya2VyJzogJGdyZXktZGFya2VyLCAnZ3JleS1kYXJrJzogJGdyZXktZGFyaywgJ2dyZXknOiAkZ3JleSwgJ2dyZXktbGlnaHQnOiAkZ3JleS1saWdodCwgJ2dyZXktbGlnaHRlcic6ICRncmV5LWxpZ2h0ZXIsICd3aGl0ZS10ZXInOiAkd2hpdGUtdGVyLCAnd2hpdGUtYmlzJzogJHdoaXRlLWJpcyksICRjdXN0b20tc2hhZGVzKTtcblxuLy8gJHNpemVzOiAkc2l6ZS0xICRzaXplLTIgJHNpemUtMyAkc2l6ZS00ICRzaXplLTUgJHNpemUtNiAkc2l6ZS03O1xuXG5AaW1wb3J0ICdidWxtYS9zYXNzL3V0aWxpdGllcy9pbml0aWFsLXZhcmlhYmxlcy5zYXNzJztcbkBpbXBvcnQgJ2J1bG1hL3Nhc3MvdXRpbGl0aWVzL2Z1bmN0aW9ucy5zYXNzJztcbkBpbXBvcnQgJ2J1bG1hL3Nhc3MvdXRpbGl0aWVzL2Rlcml2ZWQtdmFyaWFibGVzLnNhc3MnO1xuLy8gQGltcG9ydCAnYnVsbWEvc2Fzcy91dGlsaXRpZXMvYW5pbWF0aW9ucy5zYXNzJztcbkBpbXBvcnQgJ2J1bG1hL3Nhc3MvdXRpbGl0aWVzL21peGlucy5zYXNzJztcbkBpbXBvcnQgJ2J1bG1hL3Nhc3MvdXRpbGl0aWVzL2NvbnRyb2xzLnNhc3MnO1xuIiwiLy8gQ29sb3JzXG5cbiRibGFjazogICAgICAgIGhzbCgwLCAwJSwgNCUpICFkZWZhdWx0O1xuJGJsYWNrLWJpczogICAgaHNsKDAsIDAlLCA3JSkgIWRlZmF1bHQ7XG4kYmxhY2stdGVyOiAgICBoc2woMCwgMCUsIDE0JSkgIWRlZmF1bHQ7XG5cbiRncmV5LWRhcmtlcjogIGhzbCgwLCAwJSwgMjElKSAhZGVmYXVsdDtcbiRncmV5LWRhcms6ICAgIGhzbCgwLCAwJSwgMjklKSAhZGVmYXVsdDtcbiRncmV5OiAgICAgICAgIGhzbCgwLCAwJSwgNDglKSAhZGVmYXVsdDtcbiRncmV5LWxpZ2h0OiAgIGhzbCgwLCAwJSwgNzElKSAhZGVmYXVsdDtcbiRncmV5LWxpZ2h0ZXI6IGhzbCgwLCAwJSwgODYlKSAhZGVmYXVsdDtcbiRncmV5LWxpZ2h0ZXN0OiBoc2woMCwgMCUsIDkzJSkgIWRlZmF1bHQ7XG5cbiR3aGl0ZS10ZXI6ICAgIGhzbCgwLCAwJSwgOTYlKSAhZGVmYXVsdDtcbiR3aGl0ZS1iaXM6ICAgIGhzbCgwLCAwJSwgOTglKSAhZGVmYXVsdDtcbiR3aGl0ZTogICAgICAgIGhzbCgwLCAwJSwgMTAwJSkgIWRlZmF1bHQ7XG5cbiRvcmFuZ2U6ICAgICAgIGhzbCgxNCwgIDEwMCUsIDUzJSkgIWRlZmF1bHQ7XG4keWVsbG93OiAgICAgICBoc2woNDgsICAxMDAlLCA2NyUpICFkZWZhdWx0O1xuJGdyZWVuOiAgICAgICAgaHNsKDE0MSwgNTMlLCAgNTMlKSAhZGVmYXVsdDtcbiR0dXJxdW9pc2U6ICAgIGhzbCgxNzEsIDEwMCUsIDQxJSkgIWRlZmF1bHQ7XG4kY3lhbjogICAgICAgICBoc2woMjA0LCA3MSUsICA1MyUpICFkZWZhdWx0O1xuJGJsdWU6ICAgICAgICAgaHNsKDIxNywgNzElLCAgNTMlKSAhZGVmYXVsdDtcbiRwdXJwbGU6ICAgICAgIGhzbCgyNzEsIDEwMCUsIDcxJSkgIWRlZmF1bHQ7XG4kcmVkOiAgICAgICAgICBoc2woMzQ4LCA4NiUsIDYxJSkgIWRlZmF1bHQ7XG5cbi8vIFR5cG9ncmFwaHlcblxuJGZhbWlseS1zYW5zLXNlcmlmOiBCbGlua01hY1N5c3RlbUZvbnQsIC1hcHBsZS1zeXN0ZW0sIFwiU2Vnb2UgVUlcIiwgXCJSb2JvdG9cIiwgXCJPeHlnZW5cIiwgXCJVYnVudHVcIiwgXCJDYW50YXJlbGxcIiwgXCJGaXJhIFNhbnNcIiwgXCJEcm9pZCBTYW5zXCIsIFwiSGVsdmV0aWNhIE5ldWVcIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmICFkZWZhdWx0O1xuJGZhbWlseS1tb25vc3BhY2U6IG1vbm9zcGFjZSAhZGVmYXVsdDtcbiRyZW5kZXItbW9kZTogb3B0aW1pemVMZWdpYmlsaXR5ICFkZWZhdWx0O1xuXG4kc2l6ZS0xOiAzcmVtICFkZWZhdWx0O1xuJHNpemUtMjogMi41cmVtICFkZWZhdWx0O1xuJHNpemUtMzogMnJlbSAhZGVmYXVsdDtcbiRzaXplLTQ6IDEuNXJlbSAhZGVmYXVsdDtcbiRzaXplLTU6IDEuMjVyZW0gIWRlZmF1bHQ7XG4kc2l6ZS02OiAxcmVtICFkZWZhdWx0O1xuJHNpemUtNzogMC43NXJlbSAhZGVmYXVsdDtcblxuJHdlaWdodC1saWdodDogMzAwICFkZWZhdWx0O1xuJHdlaWdodC1ub3JtYWw6IDQwMCAhZGVmYXVsdDtcbiR3ZWlnaHQtbWVkaXVtOiA1MDAgIWRlZmF1bHQ7XG4kd2VpZ2h0LXNlbWlib2xkOiA2MDAgIWRlZmF1bHQ7XG4kd2VpZ2h0LWJvbGQ6IDcwMCAhZGVmYXVsdDtcblxuLy8gU3BhY2luZ1xuXG4kYmxvY2stc3BhY2luZzogMS41cmVtICFkZWZhdWx0O1xuXG4vLyBSZXNwb25zaXZlbmVzc1xuXG4vLyBUaGUgY29udGFpbmVyIGhvcml6b250YWwgZ2FwLCB3aGljaCBhY3RzIGFzIHRoZSBvZmZzZXQgZm9yIGJyZWFrcG9pbnRzXG4kZ2FwOiAzMnB4ICFkZWZhdWx0O1xuLy8gOTYwLCAxMTUyLCBhbmQgMTM0NCBoYXZlIGJlZW4gY2hvc2VuIGJlY2F1c2UgdGhleSBhcmUgZGl2aXNpYmxlIGJ5IGJvdGggMTIgYW5kIDE2XG4kdGFibGV0OiA3NjlweCAhZGVmYXVsdDtcbi8vIDk2MHB4IGNvbnRhaW5lciArIDRyZW1cbiRkZXNrdG9wOiA5NjBweCArICgyICogJGdhcCkgIWRlZmF1bHQ7XG4vLyAxMTUycHggY29udGFpbmVyICsgNHJlbVxuJHdpZGVzY3JlZW46IDExNTJweCArICgyICogJGdhcCkgIWRlZmF1bHQ7XG4kd2lkZXNjcmVlbi1lbmFibGVkOiB0cnVlICFkZWZhdWx0O1xuLy8gMTM0NHB4IGNvbnRhaW5lciArIDRyZW1cbiRmdWxsaGQ6IDEzNDRweCArICgyICogJGdhcCkgIWRlZmF1bHQ7XG4kZnVsbGhkLWVuYWJsZWQ6IHRydWUgIWRlZmF1bHQ7XG5cbi8vIE1pc2NlbGxhbmVvdXNcblxuJGVhc2luZzogZWFzZS1vdXQgIWRlZmF1bHQ7XG4kcmFkaXVzLXNtYWxsOiAycHggIWRlZmF1bHQ7XG4kcmFkaXVzOiA0cHggIWRlZmF1bHQ7XG4kcmFkaXVzLWxhcmdlOiA2cHggIWRlZmF1bHQ7XG4kcmFkaXVzLXJvdW5kZWQ6IDI5MDQ4NnB4ICFkZWZhdWx0O1xuJHNwZWVkOiA4Nm1zICFkZWZhdWx0O1xuXG4vLyBGbGFnc1xuXG4kdmFyaWFibGUtY29sdW1uczogdHJ1ZSAhZGVmYXVsdDtcbiRydGw6IGZhbHNlICFkZWZhdWx0O1xuIiwiQGltcG9ydCBcImluaXRpYWwtdmFyaWFibGVzXCI7XG5cbkBtaXhpbiBjbGVhcmZpeCB7XG4gICY6OmFmdGVyIHtcbiAgICBjbGVhcjogYm90aDtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTsgfSB9XG5cbkBtaXhpbiBjZW50ZXIoJHdpZHRoLCAkaGVpZ2h0OiAwKSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgQGlmICRoZWlnaHQgIT0gMCB7XG4gICAgbGVmdDogY2FsYyg1MCUgLSAoI3skd2lkdGh9IC8gMikpO1xuICAgIHRvcDogY2FsYyg1MCUgLSAoI3skaGVpZ2h0fSAvIDIpKTsgfVxuICBAZWxzZSB7XG4gICAgbGVmdDogY2FsYyg1MCUgLSAoI3skd2lkdGh9IC8gMikpO1xuICAgIHRvcDogY2FsYyg1MCUgLSAoI3skd2lkdGh9IC8gMikpOyB9IH1cblxuQG1peGluIGZhKCRzaXplLCAkZGltZW5zaW9ucykge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGZvbnQtc2l6ZTogJHNpemU7XG4gIGhlaWdodDogJGRpbWVuc2lvbnM7XG4gIGxpbmUtaGVpZ2h0OiAkZGltZW5zaW9ucztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICB3aWR0aDogJGRpbWVuc2lvbnM7IH1cblxuQG1peGluIGhhbWJ1cmdlcigkZGltZW5zaW9ucykge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBoZWlnaHQ6ICRkaW1lbnNpb25zO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiAkZGltZW5zaW9ucztcbiAgc3BhbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMXB4O1xuICAgIGxlZnQ6IGNhbGMoNTAlIC0gOHB4KTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246ICRzcGVlZDtcbiAgICB0cmFuc2l0aW9uLXByb3BlcnR5OiBiYWNrZ3JvdW5kLWNvbG9yLCBvcGFjaXR5LCB0cmFuc2Zvcm07XG4gICAgdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICRlYXNpbmc7XG4gICAgd2lkdGg6IDE2cHg7XG4gICAgJjpudGgtY2hpbGQoMSkge1xuICAgICAgdG9wOiBjYWxjKDUwJSAtIDZweCk7IH1cbiAgICAmOm50aC1jaGlsZCgyKSB7XG4gICAgICB0b3A6IGNhbGMoNTAlIC0gMXB4KTsgfVxuICAgICY6bnRoLWNoaWxkKDMpIHtcbiAgICAgIHRvcDogY2FsYyg1MCUgKyA0cHgpOyB9IH1cbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFSZ2JhKGJsYWNrLCAwLjA1KTsgfVxuICAvLyBNb2RpZmVyc1xuICAmLmlzLWFjdGl2ZSB7XG4gICAgc3BhbiB7XG4gICAgICAmOm50aC1jaGlsZCgxKSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1cHgpIHJvdGF0ZSg0NWRlZyk7IH1cbiAgICAgICY6bnRoLWNoaWxkKDIpIHtcbiAgICAgICAgb3BhY2l0eTogMDsgfVxuICAgICAgJjpudGgtY2hpbGQoMykge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTVweCkgcm90YXRlKC00NWRlZyk7IH0gfSB9IH1cblxuQG1peGluIG92ZXJmbG93LXRvdWNoIHtcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoOyB9XG5cbkBtaXhpbiBwbGFjZWhvbGRlciB7XG4gICRwbGFjZWhvbGRlcnM6ICc6LW1veicgJzotd2Via2l0LWlucHV0JyAnLW1veicgJy1tcy1pbnB1dCc7XG4gIEBlYWNoICRwbGFjZWhvbGRlciBpbiAkcGxhY2Vob2xkZXJzIHtcbiAgICAmOiN7JHBsYWNlaG9sZGVyfS1wbGFjZWhvbGRlciB7XG4gICAgICBAY29udGVudDsgfSB9IH1cblxuLy8gUmVzcG9uc2l2ZW5lc3NcblxuQG1peGluIGZyb20oJGRldmljZSkge1xuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkZGV2aWNlKSB7XG4gICAgQGNvbnRlbnQ7IH0gfVxuXG5AbWl4aW4gdW50aWwoJGRldmljZSkge1xuICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkZGV2aWNlIC0gMXB4KSB7XG4gICAgQGNvbnRlbnQ7IH0gfVxuXG5AbWl4aW4gbW9iaWxlIHtcbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJHRhYmxldCAtIDFweCkge1xuICAgIEBjb250ZW50OyB9IH1cblxuQG1peGluIHRhYmxldCB7XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR0YWJsZXQpLCBwcmludCB7XG4gICAgQGNvbnRlbnQ7IH0gfVxuXG5AbWl4aW4gdGFibGV0LW9ubHkge1xuICBAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkdGFibGV0KSBhbmQgKG1heC13aWR0aDogJGRlc2t0b3AgLSAxcHgpIHtcbiAgICBAY29udGVudDsgfSB9XG5cbkBtaXhpbiB0b3VjaCB7XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRkZXNrdG9wIC0gMXB4KSB7XG4gICAgQGNvbnRlbnQ7IH0gfVxuXG5AbWl4aW4gZGVza3RvcCB7XG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRkZXNrdG9wKSB7XG4gICAgQGNvbnRlbnQ7IH0gfVxuXG5AbWl4aW4gZGVza3RvcC1vbmx5IHtcbiAgQGlmICR3aWRlc2NyZWVuLWVuYWJsZWQge1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRkZXNrdG9wKSBhbmQgKG1heC13aWR0aDogJHdpZGVzY3JlZW4gLSAxcHgpIHtcbiAgICAgIEBjb250ZW50OyB9IH0gfVxuXG5AbWl4aW4gdW50aWwtd2lkZXNjcmVlbiB7XG4gIEBpZiAkd2lkZXNjcmVlbi1lbmFibGVkIHtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkd2lkZXNjcmVlbiAtIDFweCkge1xuICAgICAgQGNvbnRlbnQ7IH0gfSB9XG5cbkBtaXhpbiB3aWRlc2NyZWVuIHtcbiAgQGlmICR3aWRlc2NyZWVuLWVuYWJsZWQge1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR3aWRlc2NyZWVuKSB7XG4gICAgICBAY29udGVudDsgfSB9IH1cblxuQG1peGluIHdpZGVzY3JlZW4tb25seSB7XG4gIEBpZiAkd2lkZXNjcmVlbi1lbmFibGVkIGFuZCAkZnVsbGhkLWVuYWJsZWQge1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICR3aWRlc2NyZWVuKSBhbmQgKG1heC13aWR0aDogJGZ1bGxoZCAtIDFweCkge1xuICAgICAgQGNvbnRlbnQ7IH0gfSB9XG5cbkBtaXhpbiB1bnRpbC1mdWxsaGQge1xuICBAaWYgJGZ1bGxoZC1lbmFibGVkIHtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkZnVsbGhkIC0gMXB4KSB7XG4gICAgICBAY29udGVudDsgfSB9IH1cblxuQG1peGluIGZ1bGxoZCB7XG4gIEBpZiAkZnVsbGhkLWVuYWJsZWQge1xuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRmdWxsaGQpIHtcbiAgICAgIEBjb250ZW50OyB9IH0gfVxuXG5AbWl4aW4gbHRyIHtcbiAgQGlmIG5vdCAkcnRsIHtcbiAgICBAY29udGVudDsgfSB9XG5cbkBtaXhpbiBydGwge1xuICBAaWYgJHJ0bCB7XG4gICAgQGNvbnRlbnQ7IH0gfVxuXG5AbWl4aW4gbHRyLXByb3BlcnR5KCRwcm9wZXJ0eSwgJHNwYWNpbmcsICRyaWdodDogdHJ1ZSkge1xuICAkbm9ybWFsOiBpZigkcmlnaHQsIFwicmlnaHRcIiwgXCJsZWZ0XCIpO1xuICAkb3Bwb3NpdGU6IGlmKCRyaWdodCwgXCJsZWZ0XCIsIFwicmlnaHRcIik7XG4gIEBpZiAkcnRsIHtcbiAgICAjeyRwcm9wZXJ0eX0tI3skb3Bwb3NpdGV9OiAkc3BhY2luZzsgfVxuICBAZWxzZSB7XG4gICAgI3skcHJvcGVydHl9LSN7JG5vcm1hbH06ICRzcGFjaW5nOyB9IH1cblxuQG1peGluIGx0ci1wb3NpdGlvbigkc3BhY2luZywgJHJpZ2h0OiB0cnVlKSB7XG4gICRub3JtYWw6IGlmKCRyaWdodCwgXCJyaWdodFwiLCBcImxlZnRcIik7XG4gICRvcHBvc2l0ZTogaWYoJHJpZ2h0LCBcImxlZnRcIiwgXCJyaWdodFwiKTtcbiAgQGlmICRydGwge1xuICAgICN7JG9wcG9zaXRlfTogJHNwYWNpbmc7IH1cbiAgQGVsc2Uge1xuICAgICN7JG5vcm1hbH06ICRzcGFjaW5nOyB9IH1cblxuLy8gUGxhY2Vob2xkZXJzXG5cbkBtaXhpbiB1bnNlbGVjdGFibGUge1xuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7IH1cblxuJXVuc2VsZWN0YWJsZSB7XG4gIEBpbmNsdWRlIHVuc2VsZWN0YWJsZTsgfVxuXG5AbWl4aW4gYXJyb3coJGNvbG9yOiB0cmFuc3BhcmVudCkge1xuICBib3JkZXI6IDNweCBzb2xpZCAkY29sb3I7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm9yZGVyLXJpZ2h0OiAwO1xuICBib3JkZXItdG9wOiAwO1xuICBjb250ZW50OiBcIiBcIjtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogMC42MjVlbTtcbiAgbWFyZ2luLXRvcDogLTAuNDM3NWVtO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcbiAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xuICB3aWR0aDogMC42MjVlbTsgfVxuXG4lYXJyb3cge1xuICBAaW5jbHVkZSBhcnJvdzsgfVxuXG5AbWl4aW4gYmxvY2soJHNwYWNpbmc6ICRibG9jay1zcGFjaW5nKSB7XG4gICY6bm90KDpsYXN0LWNoaWxkKSB7XG4gICAgbWFyZ2luLWJvdHRvbTogJHNwYWNpbmc7IH0gfVxuXG4lYmxvY2sge1xuICBAaW5jbHVkZSBibG9jazsgfVxuXG5AbWl4aW4gZGVsZXRlIHtcbiAgQGV4dGVuZCAldW5zZWxlY3RhYmxlO1xuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogYnVsbWFSZ2JhKCRzY2hlbWUtaW52ZXJ0LCAwLjIpO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6ICRyYWRpdXMtcm91bmRlZDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBwb2ludGVyLWV2ZW50czogYXV0bztcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmbGV4LWdyb3c6IDA7XG4gIGZsZXgtc2hyaW5rOiAwO1xuICBmb250LXNpemU6IDA7XG4gIGhlaWdodDogMjBweDtcbiAgbWF4LWhlaWdodDogMjBweDtcbiAgbWF4LXdpZHRoOiAyMHB4O1xuICBtaW4taGVpZ2h0OiAyMHB4O1xuICBtaW4td2lkdGg6IDIwcHg7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgd2lkdGg6IDIwcHg7XG4gICY6OmJlZm9yZSxcbiAgJjo6YWZ0ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRzY2hlbWUtbWFpbjtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGxlZnQ6IDUwJTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSkgcm90YXRlKDQ1ZGVnKTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyOyB9XG4gICY6OmJlZm9yZSB7XG4gICAgaGVpZ2h0OiAycHg7XG4gICAgd2lkdGg6IDUwJTsgfVxuICAmOjphZnRlciB7XG4gICAgaGVpZ2h0OiA1MCU7XG4gICAgd2lkdGg6IDJweDsgfVxuICAmOmhvdmVyLFxuICAmOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBidWxtYVJnYmEoJHNjaGVtZS1pbnZlcnQsIDAuMyk7IH1cbiAgJjphY3RpdmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJ1bG1hUmdiYSgkc2NoZW1lLWludmVydCwgMC40KTsgfVxuICAvLyBTaXplc1xuICAmLmlzLXNtYWxsIHtcbiAgICBoZWlnaHQ6IDE2cHg7XG4gICAgbWF4LWhlaWdodDogMTZweDtcbiAgICBtYXgtd2lkdGg6IDE2cHg7XG4gICAgbWluLWhlaWdodDogMTZweDtcbiAgICBtaW4td2lkdGg6IDE2cHg7XG4gICAgd2lkdGg6IDE2cHg7IH1cbiAgJi5pcy1tZWRpdW0ge1xuICAgIGhlaWdodDogMjRweDtcbiAgICBtYXgtaGVpZ2h0OiAyNHB4O1xuICAgIG1heC13aWR0aDogMjRweDtcbiAgICBtaW4taGVpZ2h0OiAyNHB4O1xuICAgIG1pbi13aWR0aDogMjRweDtcbiAgICB3aWR0aDogMjRweDsgfVxuICAmLmlzLWxhcmdlIHtcbiAgICBoZWlnaHQ6IDMycHg7XG4gICAgbWF4LWhlaWdodDogMzJweDtcbiAgICBtYXgtd2lkdGg6IDMycHg7XG4gICAgbWluLWhlaWdodDogMzJweDtcbiAgICBtaW4td2lkdGg6IDMycHg7XG4gICAgd2lkdGg6IDMycHg7IH0gfVxuXG4lZGVsZXRlIHtcbiAgQGluY2x1ZGUgZGVsZXRlOyB9XG5cbkBtaXhpbiBsb2FkZXIge1xuICBhbmltYXRpb246IHNwaW5Bcm91bmQgNTAwbXMgaW5maW5pdGUgbGluZWFyO1xuICBib3JkZXI6IDJweCBzb2xpZCAkZ3JleS1saWdodGVyO1xuICBib3JkZXItcmFkaXVzOiAkcmFkaXVzLXJvdW5kZWQ7XG4gIGJvcmRlci1yaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci10b3AtY29sb3I6IHRyYW5zcGFyZW50O1xuICBjb250ZW50OiBcIlwiO1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxZW07XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDFlbTsgfVxuXG4lbG9hZGVyIHtcbiAgQGluY2x1ZGUgbG9hZGVyOyB9XG5cbkBtaXhpbiBvdmVybGF5KCRvZmZzZXQ6IDApIHtcbiAgYm90dG9tOiAkb2Zmc2V0O1xuICBsZWZ0OiAkb2Zmc2V0O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAkb2Zmc2V0O1xuICB0b3A6ICRvZmZzZXQ7IH1cblxuJW92ZXJsYXkge1xuICBAaW5jbHVkZSBvdmVybGF5OyB9XG4iXX0= */
