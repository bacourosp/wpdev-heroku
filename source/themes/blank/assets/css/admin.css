@-webkit-keyframes spinAround {
  from {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  to {
    -webkit-transform: rotate(359deg);
            transform: rotate(359deg); } }

@keyframes spinAround {
  from {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg); }
  to {
    -webkit-transform: rotate(359deg);
            transform: rotate(359deg); } }

#blank-panel {
  margin: 0 0 0 -20px;
  background-color: white;
  height: 100%; }
  #blank-panel > header {
    padding: 16px 32px; }
    #blank-panel > header h1 {
      padding: 0;
      font-weight: 600;
      line-height: 2em; }
  #blank-panel > nav {
    padding: 0 32px;
    margin: 0;
    border-bottom: 1px solid #e2e4e7; }
    #blank-panel > nav ul {
      margin: 0 0 -1px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex; }
      #blank-panel > nav ul li {
        display: -webkit-inline-box;
        display: -ms-inline-flexbox;
        display: inline-flex;
        margin: 0;
        border-color: #e2e4e7;
        border-style: solid;
        border-width: 1px 0 0 1px; }
        #blank-panel > nav ul li:last-child {
          border-right-width: 1px; }
        #blank-panel > nav ul li.active {
          background-color: #f1f1f1;
          border-bottom-width: 0; }
      #blank-panel > nav ul a {
        text-decoration: none;
        display: block;
        padding: 10px 22px;
        color: #555;
        font-weight: bold; }
        #blank-panel > nav ul a:focus, #blank-panel > nav ul a:active {
          -webkit-box-shadow: none;
                  box-shadow: none; }
  #blank-panel > form {
    background-color: #f1f1f1;
    padding: 0 32px; }
    #blank-panel > form::after {
      clear: both;
      content: " ";
      display: table; }
  #blank-panel #panel-sections {
    padding: 16px 0;
    border-bottom: 1px solid #dbdbdb; }
    #blank-panel #panel-sections > section {
      display: none; }
      #blank-panel #panel-sections > section.active {
        display: block; }
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
